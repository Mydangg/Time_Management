import 'package:flutter/material.dart';
import 'package:time_management/tasks/data/local/data_sources/tasks_data_provider.dart';
import 'package:time_management/tasks/data/local/model/task_model.dart';

class ChatBot_Service{
  bool isScheduleCommand(String input) {
    final lower = input.toLowerCase();

    final hasKeyword = lower.contains('ƒë·∫∑t l·ªãch') ||
        lower.contains('l√™n l·ªãch') ||
        lower.contains('g·∫∑p') ||
        lower.contains('l√†m');

    final hasDayOfWeek = RegExp(r'(th·ª© ?[2-7]|ch·ªß nh·∫≠t|cn)', caseSensitive: false).hasMatch(lower);
    final hasFullDate = RegExp(r'\b\d{1,2}([/-])\d{1,2}\b').hasMatch(lower) ||
        RegExp(r'\b\d{1,2} ?(th√°ng|thg) ?\d{1,2}\b').hasMatch(lower);

    return hasKeyword && (hasDayOfWeek || hasFullDate);
  }

  TaskModel? extractSchedule(String input) {
    final lower = input.toLowerCase();

    // Regex ƒë·ªÉ t√¨m ti√™u ƒë·ªÅ s·ª± ki·ªán, ng√†y, v√† gi·ªù
    final RegExp eventRegex = RegExp(r'(?<=(ƒë·∫∑t l·ªãch| l√™n l·ªãch | ƒë·∫∑t l·ªãch cho| t·∫°o cu·ªôc h·∫πn)\s)(.*?)(?=\s*(l√∫c| v√†o))', caseSensitive: false);
    final RegExp dayRegex = RegExp(r'ng√†y ?(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})', caseSensitive: false);
    final RegExp timeRegex = RegExp(r'(\d{1,2})(h| gi·ªù)(\d{1,2})?', caseSensitive: false);

    final eventMatch = eventRegex.firstMatch(lower);
    final dayMatch = dayRegex.firstMatch(lower);
    final timeMatches = timeRegex.allMatches(lower).toList();

    TimeOfDay? timeOfDay;

    // N·∫øu c√≥ gi·ªù th√¨ parse gi·ªù th√†nh TimeOfDay
    if (timeMatches.isNotEmpty) {
      String? hourString = timeMatches[0].group(1);
      String? minuteString = timeMatches[0].group(3); // L·∫•y ph√∫t (c√≥ th·ªÉ null)

      if (hourString != null) {
        int hour = int.parse(hourString);
        int minute = minuteString != null ? int.parse(minuteString) : 00;

        timeOfDay = TimeOfDay(hour: hour, minute: minute);
      }
    }

    // N·∫øu c√≥ ng√†y th√¨ parse ng√†y th√†nh DateTime
    String dateString = '';
    if (dayMatch != null) {
      dateString = dayMatch.group(1)!.replaceAll(RegExp(r'[/-]'), '-').trim();

      List<String> dateParts = dateString.split('-');
      if (dateParts.length == 3) {
        String day = dateParts[0].padLeft(2, '0'); // Th√™m s·ªë 0 n·∫øu ng√†y ch·ªâ c√≥ 1 ch·ªØ s·ªë
        String month = dateParts[1].padLeft(2, '0'); // Th√™m s·ªë 0 n·∫øu th√°ng ch·ªâ c√≥ 1 ch·ªØ s·ªë
        String year = dateParts[2];

        dateString = '$year-$month-$day'; // ƒê·ªãnh d·∫°ng l·∫°i ng√†y theo chu·∫©n yyyy-MM-dd
      }
    }

    DateTime startDateTime = DateTime.parse(dateString);

    // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c t√¨m th·∫•y
    if (eventMatch != null && dayMatch != null && timeOfDay != null) {

      final String taskId = DateTime.now()
          .millisecondsSinceEpoch
          .toString();

      TaskModel taskModel = TaskModel(
        id: taskId,
        title: eventMatch.group(0)!.trim(),
        description: "Ch∆∞a c√≥ n·ªôi dung",
        priority: "Normal",
        repeat: "None",
        createBy: "",
        createById: "",
        startDateTime: startDateTime,
        stopDateTime: startDateTime,
        startTime: timeOfDay,
        endTime: timeOfDay,
      );

      return taskModel;
    }

    // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ª£p l·ªá
    return null;
  }
  Future<List<String>> handleFreeSchedule() async {
    TaskDataProvider taskDataProvider = TaskDataProvider();
    List<TaskModel> tasks = await taskDataProvider.getTasks(); // l·∫•y to√†n b·ªô task l∆∞u local

    Map<DateTime, List<TaskModel>> groupedTasks = {};

    // Gom nh√≥m task theo t·ª´ng ng√†y
    for (var task in tasks) {
      if (task.startDateTime != null) {
        DateTime day = DateTime(task.startDateTime!.year, task.startDateTime!.month, task.startDateTime!.day);
        if (!groupedTasks.containsKey(day)) {
          groupedTasks[day] = [];
        }
        groupedTasks[day]!.add(task);
      }
    }

    List<String> slots = [];
    DateTime today = DateTime.now();

    for (int i = 0; i < 7; i++) {
      DateTime day = today.add(Duration(days: i));
      DateTime dayStart = DateTime(day.year, day.month, day.day, 0, 0);
      DateTime dayEnd = DateTime(day.year, day.month, day.day, 23, 59);

      List<TaskModel> tasksInDay = groupedTasks[DateTime(day.year, day.month, day.day)] ?? [];

      if (tasksInDay.isEmpty) {
        slots.add("${day.day}/${day.month}: C·∫£ ng√†y r·∫£nh üåü");
      } else {
        tasksInDay.sort((a, b) {
          if (a.startDateTime == null && b.startDateTime == null) return 0;
          if (a.startDateTime == null) return 1;
          if (b.startDateTime == null) return -1;
          return a.startDateTime!.compareTo(b.startDateTime!);
        });

        DateTime lastEndTime = dayStart;

        for (var task in tasksInDay) {
          // if (task.startDateTime!.isAfter(lastEndTime)) {
          //   slots.add("${day.day}/${day.month}: R·∫£nh t·ª´ ${_formatTime(lastEndTime)} ƒë·∫øn ${_formatTime(task.startDateTime!)}");
          // }

          DateTime taskEndTime = task.startDateTime!.add(Duration(hours: 1)); // Gi·∫£ s·ª≠ task k√©o d√†i 1 ti·∫øng
          slots.add("${day.day}/${day.month}: B·∫≠n '${task.title ?? 'C√¥ng vi·ªác'}' t·ª´ ${task.startTime!.hour}:${task.startTime!.minute} ƒë·∫øn ${task.endTime!.hour}:${task.endTime!.minute}");

          lastEndTime = taskEndTime;
        }
      }
    }

    return slots;
  }

// H√†m ph·ª• ƒë·ªãnh d·∫°ng gi·ªù ƒë·∫πp ƒë·∫πp
  String _formatTime(DateTime time) {
    return "${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}";
  }

}

